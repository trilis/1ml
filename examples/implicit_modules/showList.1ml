local import "prelude"
import "../../basis/list.1ml"

type SHOW = {
    type t
    show : t ~> text
}

implicit Show_int = {
    type t = int
    show = primitive "Int.toText"
}

implicit Show_bool = {
    type t = bool
    show x = if x then "true" else "false"
}

implicit Show_list [S: SHOW] = {
    type t = list S.t
    show x = "[" ++ (toText S.show x) ++ "]"
}

show [S: SHOW] x = S.show x

test1 = show (1 :: (2 :: (3 :: nil)))
test2 = show ((1 :: (2 :: nil)) :: ((3 :: (4 :: nil)) :: (nil :: ((5 :: (6 :: nil)) :: nil))))
test3 = show nil

do Text.print (test1 ++ "\n")
do Text.print (test2 ++ "\n")
do Text.print (test3 ++ "\n")